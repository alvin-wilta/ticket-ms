version: '3.8'
services:
  #  NOTE - Databases
  db:
    image: postgres
    restart: always
    user: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-h", "db"]
      interval: 5s
      timeout: 60s
      retries: 5

  # NOTE - NSQ
  nsqlookupd:
    image: nsqio/nsq
    command: /nsqlookupd
    ports:
      - "4160:4160" # nsqd discovery port for producers and clients (HTTP)
      - "4161:4161" # nsqd register port (TCP)
    restart: always
  nsqd:
    image: nsqio/nsq
    command:  /nsqd --broadcast-address=nsqd --lookupd-tcp-address=nsqlookupd:4160
    depends_on:
      - nsqlookupd
    ports:
      - "4150:4150" # Port for producers and clients
      - "4151:4151" # Port for monitoring
  nsqadmin:
    image: nsqio/nsq
    command: /nsqadmin --lookupd-http-address=nsqlookupd:4161
    depends_on:
      - nsqlookupd  
    ports:
      - "4171:4171" # Port for accessing the admin panel

  # NOTE - Services
  # ANCHOR - TICKET SERVICE
  ticket_service:
    build:
      context: .
      dockerfile: ./ticket_service/Dockerfile
    environment:
      PORT: 50051
      DOCKER_BUILDKIT: 0
    depends_on:
      db:
        condition: service_healthy
      nsqlookupd:
        condition: service_started
    restart: on-failure
    ports:
      - "50051:50051"
    expose:
      - 50051
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http:localhost:50051/health"]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 5s

  # ANCHOR - PROXY SERVICE
  proxy_service:
    build:
      context: .
      dockerfile: ./proxy_service/Dockerfile
    environment:
      - PORT: 50001
      - DOCKER_BUILDKIT: 0
    expose:
      - 50001
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      nsqd:
        condition: service_started
    restart: on-failure
  
  
networks:
  app-network:
    driver: bridge
  
# volumes:
#   db:
#     driver: local