package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"
	"log"

	"github.com/alvin-wilta/ticket-ms/proto"
	"github.com/alvin-wilta/ticket-ms/proxy_service/graph/model"
)

// CreateTicket is the resolver for the createTicket field.
func (r *mutationResolver) CreateTicket(ctx context.Context, input model.NewTicket) (*model.CreateTicketResponse, error) {
	log.Printf("Createticket called")
	// return &model.CreateTicketResponse{
	// 	ID:      "1",
	// 	Success: true,
	// }, nil
	panic("any")
}

// UpdateTicket is the resolver for the updateTicket field.
func (r *mutationResolver) UpdateTicket(ctx context.Context, input model.UpdateTicket) (*model.UpdateTicketResponse, error) {
	panic(fmt.Errorf("not implemented: UpdateTicket - updateTicket"))
}

// DeleteTicket is the resolver for the deleteTicket field.
func (r *mutationResolver) DeleteTicket(ctx context.Context, input *model.DeleteTicket) (*model.DeleteTicketResponse, error) {
	panic(fmt.Errorf("not implemented: DeleteTicket - deleteTicket"))
}

// HealthCheck is the resolver for the healthCheck field.
func (r *queryResolver) HealthCheck(ctx context.Context) (string, error) {
	res, err := r.Resolver.grpcClient.HealthCheck(ctx, &proto.Empty{})
	if err != nil {
		log.Panicf("[GQL] HealthCheck err: %v", err)
	}
	if !res.Success {
		return "failed", nil
	}
	return "success", nil
}

// Tickets is the resolver for the tickets field.
func (r *queryResolver) Tickets(ctx context.Context) ([]*model.Ticket, error) {
	var ticketList []*model.Ticket
	res, err := r.Resolver.grpcClient.GetTicketList(ctx, &proto.Empty{})
	if err != nil {
		log.Panicf("[GQL] Tickets err: %v", err)
	}

	for _, ticket := range res.Tickets {
		// Map response
		newId := int(ticket.Id)
		newDescription := string(ticket.Description)
		newStatus := string(ticket.Status)

		ticketList = append(ticketList, &model.Ticket{
			ID:          &newId,
			Title:       ticket.Title,
			Description: &newDescription,
			Status:      &newStatus,
			Name:        ticket.Name,
		})
	}

	return ticketList, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
